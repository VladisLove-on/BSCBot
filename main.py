import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
import asyncio
import nest_asyncio
from datetime import datetime, time

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
nest_asyncio.apply()

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '6072615655:AAHQh3BVU3HNHd3p7vfvE3JsBzfHiG-hNMU'
# ID –∫–∞–Ω–∞–ª–∞
CHANNEL_ID = '-1001949728514'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}
last_selection = {}

async def start(update, context):
    chat_id = update.message.chat_id
    keyboard = [[InlineKeyboardButton("–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å", callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=chat_id, text="–í—ã –º–æ–∂–µ—Ç–µ —É–≤–µ–¥–æ–º–∏—Ç—å –∑–∞–≤–æ–¥—Å–∫–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ –≤–Ω–æ–≤—å –ø—Ä–∏–±—ã–≤—à–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö.", reply_markup=reply_markup)

async def transport_selection(chat_id, context):
    now = datetime.now()
    keyboard = [
        [InlineKeyboardButton("üöõ –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º", callback_data='transport_car'), InlineKeyboardButton("üöÇ –í–∞–≥–æ–Ω–∞–º–∏", callback_data='transport_train')]
    ]
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤—ã–±–æ—Ä–æ–º
    if now.hour == 12 and chat_id in last_selection:
        last_cargo = last_selection[chat_id].get('cargo', '')
        last_sender = last_selection[chat_id].get('sender', '')
        if last_cargo and last_sender:
            keyboard.append([InlineKeyboardButton(f"{last_cargo}/{last_sender}", callback_data='last_selection')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.", reply_markup=reply_markup)

async def button(update, context):
    query = update.callback_query
    chat_id = query.message.chat_id
    data = query.data

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∏
    await query.answer()

    if data == 'start':
        await transport_selection(chat_id, context)
        return

    if chat_id not in user_data:
        user_data[chat_id] = {}

    if data == 'transport_car':
        user_data[chat_id]['transport'] = "–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º"
        sender_keyboard = [
            [InlineKeyboardButton("–ö—Ä–∏–≤–æ–π —Ä–æ–≥ —Ü–µ–º–µ–Ω—Ç", callback_data='sender_krc'), InlineKeyboardButton("–°–ø–µ—Ü–ö–∞—Ä—å–µ—Ä", callback_data='sender_sk')],
            [InlineKeyboardButton("–ë–∞–ª–æ–≤—Å–∫–∏–µ –ø–µ—Å–∫–∏", callback_data='sender_bp'), InlineKeyboardButton("–õ—é–±–∏–º–æ–≤—Å—å–∫–∏–π –∫–∞—Ä—å–µ—Ä", callback_data='sender_lk')],
            [InlineKeyboardButton("–¢–û–í –ú–ö–ö ‚Ññ3", callback_data='sender_mkk'), InlineKeyboardButton("–ù–æ–≤–∞—Ç–æ—Ä", callback_data='sender_nov')],
            [InlineKeyboardButton("–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data='sender_custom')]
        ]
        await context.bot.send_message(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:", reply_markup=InlineKeyboardMarkup(sender_keyboard))

    elif data == 'transport_train':
        user_data[chat_id]['transport'] = "–í–∞–≥–æ–Ω–∞–º–∏"
        sender_keyboard = [
            [InlineKeyboardButton("–ö—Ä–∏–≤–æ–π —Ä–æ–≥ —Ü–µ–º–µ–Ω—Ç", callback_data='sender_krc'), InlineKeyboardButton("–¢–û–í –ú–ö–ö ‚Ññ3", callback_data='sender_mkk')],
            [InlineKeyboardButton("–ù–æ–≤–∞—Ç–æ—Ä", callback_data='sender_nov'), InlineKeyboardButton("–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data='sender_custom')]
        ]
        await context.bot.send_message(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:", reply_markup=InlineKeyboardMarkup(sender_keyboard))

    elif data.startswith('sender_'):
        senders = {
            'sender_krc': '–ö—Ä–∏–≤–æ–π —Ä–æ–≥ —Ü–µ–º–µ–Ω—Ç',
            'sender_sk': '–°–ø–µ—Ü–ö–∞—Ä—å–µ—Ä',
            'sender_bp': '–ë–∞–ª–æ–≤—Å–∫–∏–µ –ø–µ—Å–∫–∏',
            'sender_lk': '–õ—é–±–∏–º–æ–≤—Å—å–∫–∏–π –∫–∞—Ä—å–µ—Ä',
            'sender_mkk': '–¢–û–í –ú–ö–ö ‚Ññ3',
            'sender_nov': '–ù–æ–≤–∞—Ç–æ—Ä',
        }
        sender = senders.get(data)
        if sender == 'custom':
            await context.bot.send_message(chat_id=chat_id, text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:")
            return
        user_data[chat_id]['sender'] = sender
        await cargo_selection(chat_id, context)

    elif data.startswith('cargo_'):
        cargos = {
            'cargo_sand': '–ü–µ—Å–æ–∫',
            'cargo_cement400': '–¶–µ–º–µ–Ω—Ç –ú400',
            'cargo_cement500': '–¶–µ–º–µ–Ω—Ç –ú500',
            'cargo_gravel5x10': '–©–µ–±–µ–Ω—å 5—Ö10',
            'cargo_gravel5x20': '–©–µ–±–µ–Ω—å 5—Ö20',
            'cargo_gravel10x20': '–©–µ–±–µ–Ω—å 10—Ö20',
            'cargo_gravel20x40': '–©–µ–±–µ–Ω—å 20—Ö40'
        }
        user_data[chat_id]['cargo'] = cargos.get(data)
        if user_data[chat_id]['transport'] == "–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä
            last_selection[chat_id] = {'cargo': user_data[chat_id]['cargo'], 'sender': user_data[chat_id]['sender']}
            await quantity_selection(chat_id, context)
        else:
            await status_selection(chat_id, context)

    elif data == 'last_selection':
        user_data[chat_id]['transport'] = "–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º"
        user_data[chat_id]['cargo'] = last_selection[chat_id]['cargo']
        user_data[chat_id]['sender'] = last_selection[chat_id]['sender']
        await quantity_selection(chat_id, context)

    elif data.startswith('quantity_'):
        user_data[chat_id]['quantity'] = data.split('_')[1]
        await preview_message_car(chat_id, context)

    elif data.startswith('status_'):
        statuses = {'status_unloaded': 'üü¢ –†–∞–∑–≥—Ä—É–∂–µ–Ω–æ', 'status_not_unloaded': 'üü° –ù–µ –†–∞–∑–≥—Ä—É–∂–µ–Ω–æ'}
        user_data[chat_id]['status'] = statuses.get(data)
        await preview_message_train(chat_id, context)

    elif data == 'send':
        if user_data[chat_id]['transport'] == "–ê–≤—Ç–æ–º–æ–±–∏–ª–µ–º":
            message = f"üöõ–ù–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µüîî\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {user_data[chat_id]['transport']}\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_data[chat_id]['sender']}\n–ì—Ä—É–∑: {user_data[chat_id]['cargo']}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω: {user_data[chat_id]['quantity']}"
        else:
            message = f"üöÇ–ù–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µüîî\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {user_data[chat_id]['transport']}\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_data[chat_id]['sender']}\n–ì—Ä—É–∑: {user_data[chat_id]['cargo']}\n–°—Ç–∞—Ç—É—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: {user_data[chat_id]['status']}"
        await context.bot.send_message(chat_id=CHANNEL_ID, text=message)
        await transport_selection(chat_id, context)
        user_data[chat_id].clear()

    elif data == 'cancel':
        await transport_selection(chat_id, context)
        user_data[chat_id].clear()

async def cargo_selection(chat_id, context):
    keyboard = [
        [InlineKeyboardButton("–ü–µ—Å–æ–∫", callback_data='cargo_sand'), InlineKeyboardButton("–¶–µ–º–µ–Ω—Ç –ú400", callback_data='cargo_cement400')],
        [InlineKeyboardButton("–¶–µ–º–µ–Ω—Ç –ú500", callback_data='cargo_cement500'), InlineKeyboardButton("–©–µ–±–µ–Ω—å 5—Ö10", callback_data='cargo_gravel5x10')],
        [InlineKeyboardButton("–©–µ–±–µ–Ω—å 5—Ö20", callback_data='cargo_gravel5x20'), InlineKeyboardButton("–©–µ–±–µ–Ω—å 10—Ö20", callback_data='cargo_gravel10x20')],
        [InlineKeyboardButton("–©–µ–±–µ–Ω—å 20—Ö40", callback_data='cargo_gravel20x40')]
    ]
    await context.bot.send_message(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–∑:", reply_markup=InlineKeyboardMarkup(keyboard))

async def quantity_selection(chat_id, context):
    keyboard = [
        [InlineKeyboardButton("1", callback_data='quantity_1'), InlineKeyboardButton("2", callback_data='quantity_2')],
        [InlineKeyboardButton("3", callback_data='quantity_3'), InlineKeyboardButton("4", callback_data='quantity_4')],
        [InlineKeyboardButton("5", callback_data='quantity_5'), InlineKeyboardButton("–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data='quantity_custom')]
    ]
    await context.bot.send_message(chat_id=chat_id, text="–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=InlineKeyboardMarkup(keyboard))

async def status_selection(chat_id, context):
    keyboard = [
        [InlineKeyboardButton("üü¢ –†–∞–∑–≥—Ä—É–∂–µ–Ω–æ", callback_data='status_unloaded'), InlineKeyboardButton("üü° –ù–µ –†–∞–∑–≥—Ä—É–∂–µ–Ω–æ", callback_data='status_not_unloaded')]
    ]
    await context.bot.send_message(chat_id=chat_id, text="–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

async def preview_message_car(chat_id, context):
    message = f"üöõ–ù–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µüîî\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {user_data[chat_id]['transport']}\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_data[chat_id]['sender']}\n–ì—Ä—É–∑: {user_data[chat_id]['cargo']}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω: {user_data[chat_id]['quantity']}"
    keyboard = [
        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='send'), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')]
    ]
    await context.bot.send_message(chat_id=chat_id, text=message, reply_markup=InlineKeyboardMarkup(keyboard))

async def preview_message_train(chat_id, context):
    message = f"üöÇ–ù–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µüîî\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {user_data[chat_id]['transport']}\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_data[chat_id]['sender']}\n–ì—Ä—É–∑: {user_data[chat_id]['cargo']}\n–°—Ç–∞—Ç—É—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: {user_data[chat_id]['status']}"
    keyboard = [
        [InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='send'), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')]
    ]
    await context.bot.send_message(chat_id=chat_id, text=message, reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_custom_input(update, context):
    chat_id = update.message.chat_id
    text = update.message.text
    if chat_id in user_data and 'sender' not in user_data[chat_id]:
        user_data[chat_id]['sender'] = text
        await cargo_selection(chat_id, context)
    elif chat_id in user_data and 'quantity' not in user_data[chat_id]:
        user_data[chat_id]['quantity'] = text
        await preview_message_car(chat_id, context)

async def home(update, context):
    chat_id = update.message.chat_id
    user_data[chat_id].clear()
    await transport_selection(chat_id, context)

async def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("home", home))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_input))

    await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
